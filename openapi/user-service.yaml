openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8083/api
  description: Generated server url
tags:
- name: Role API
  description: Operations related to roles.
- name: User API
  description: Operations related to user.
- name: Payment API
  description: Operations related to payments.
- name: Budget package offer API
  description: Operations related to budget packages.
paths:
  /v1/user/reset-password/{userId}:
    put:
      tags:
      - User API
      summary: Resets a user's password
      description: Resets the password for a user identified by userId.
      operationId: resetUserPassword
      parameters:
      - name: userId
        in: path
        description: UUID of the user whose password is being reset
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: New password value
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "400":
          description: Password does not meet validation requirements
          content:
            application/json:
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: string
        "200":
          description: User view with updated details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserViewDto"
  /v1/user/delete-role/{userId}/{roleId}:
    put:
      tags:
      - User API
      description: Delete role from user
      operationId: deleteRoleFromUser
      parameters:
      - name: userId
        in: path
        description: Id of user from which the role should be deleted.
        required: true
        schema:
          type: string
          format: uuid
      - name: roleId
        in: path
        description: Id of role that should be deleted from user.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Desired user or role does not exist
          content:
            application/json:
              schema:
                type: string
        "200":
          description: Role was successfully deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserViewDto"
  /v1/user/deactivate/{id}:
    put:
      tags:
      - User API
      description: Deactivates user account.
      operationId: deactivateUser
      parameters:
      - name: id
        in: path
        description: Id of user which should be deactivated.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Desired user does not exist
          content:
            application/json:
              schema:
                type: string
        "200":
          description: Account was successfully deactivated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserViewDto"
  /v1/user/change-password:
    put:
      tags:
      - User API
      description: Updates user's password of user specified by it's ID
      operationId: changeUserPassword
      requestBody:
        description: New and old password values
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequestDto"
        required: true
      responses:
        "400":
          description: Request body does not meet validation requirements
          content:
            application/json:
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Desired user does not exist
          content:
            application/json:
              schema:
                type: string
        "200":
          description: "User password was successfully updated, returning updated\
            \ model"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserViewDto"
  /v1/user/add-role/{userId}/{roleId}:
    put:
      tags:
      - User API
      description: Add role to user
      operationId: addRoleToUser
      parameters:
      - name: userId
        in: path
        description: Id of user to which the role should be added.
        required: true
        schema:
          type: string
          format: uuid
      - name: roleId
        in: path
        description: Id of role that should be added to user.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Desired user or role does not exist
          content:
            application/json:
              schema:
                type: string
        "200":
          description: Role was successfully added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserViewDto"
  /v1/user/activate/{id}:
    put:
      tags:
      - User API
      description: Activates user account.
      operationId: activateUser
      parameters:
      - name: id
        in: path
        description: Id of user which should be activated.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Desired user does not exist
          content:
            application/json:
              schema:
                type: string
        "200":
          description: Account was successfully activated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserViewDto"
  /v1/user/:
    put:
      tags:
      - User API
      description: Updates user by it's ID
      operationId: updateUser
      requestBody:
        description: Updated user values
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserViewDto"
        required: true
      responses:
        "400":
          description: Request body does not meet validation requirements
          content:
            application/json:
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Desired user does not exist
          content:
            application/json:
              schema:
                type: string
        "200":
          description: "User was successfully updated, returning updated model"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserViewDto"
    post:
      tags:
      - User API
      description: Creates a new user with given properties
      operationId: registerUser
      requestBody:
        description: Data for user creation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateDto"
        required: true
      responses:
        "400":
          description: Validation of input data failed
          content:
            application/json:
              schema:
                type: string
        "409":
          description: Entity already exists
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "201":
          description: User View with newly created user data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserViewDto"
  /v1/role/:
    put:
      tags:
      - Role API
      description: Updates role by it's ID
      operationId: updateRole
      requestBody:
        description: Updated role values
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleViewDto"
        required: true
      responses:
        "400":
          description: Request body does not meet validation requirements
          content:
            application/json:
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Desired role does not exist
          content:
            application/json:
              schema:
                type: string
        "200":
          description: "Role was successfully updated, returning updated model"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleViewDto"
    post:
      tags:
      - Role API
      description: Creates a new role with given properties
      operationId: createRole
      requestBody:
        description: Data for role creation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleViewDto"
        required: true
      responses:
        "400":
          description: Validation of input data failed
          content:
            application/json:
              schema:
                type: string
        "409":
          description: Entity already exists
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "201":
          description: Role View with newly created role data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleViewDto"
  /v1/payment/:
    put:
      tags:
      - Payment API
      description: Updates payment by it's ID
      operationId: updatePayment
      requestBody:
        description: Updated payment values
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentUpdateCreateDto"
        required: true
      responses:
        "400":
          description: Request body does not meet validation requirements
          content:
            application/json:
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Desired payment does not exist
          content:
            application/json:
              schema:
                type: string
        "200":
          description: "Payment was successfully updated, returning updated model"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentViewDto"
    post:
      tags:
      - Payment API
      description: Creates a new Payment with given properties
      operationId: createPayment
      requestBody:
        description: Data for payment creation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentUpdateCreateDto"
        required: true
      responses:
        "400":
          description: Validation of input data failed
          content:
            application/json:
              schema:
                type: string
        "409":
          description: Entity already exists
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Desired user or budget package does not exist
          content:
            application/json:
              schema:
                type: string
        "201":
          description: User View with newly created payment data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentViewDto"
  /v1/budget-package-offer/deactivate/{id}:
    put:
      tags:
      - Budget package offer API
      description: Returns deactivated package by it's id.
      operationId: deactivateBudgetOfferPackage
      parameters:
      - name: id
        in: path
        description: UUID of desired package
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "400":
          description: Path parameter does not have a form of UUID
          content:
            application/json:
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Desired package does not exist
          content:
            application/json:
              schema:
                type: string
        "200":
          description: Budget package was deactivated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BudgetOfferPackageDto"
  /v1/budget-package-offer/activate/{id}:
    put:
      tags:
      - Budget package offer API
      description: Returns activated package by it's id.
      operationId: activateBudgetOfferPackage
      parameters:
      - name: id
        in: path
        description: UUID of desired package
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "400":
          description: Path parameter does not have a form of UUID
          content:
            application/json:
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Desired package does not exist
          content:
            application/json:
              schema:
                type: string
        "200":
          description: Budget package was activated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BudgetOfferPackageDto"
  /v1/budget-package-offer/:
    post:
      tags:
      - Budget package offer API
      description: Creates a package with given properties
      operationId: createBudgetOfferPackage
      requestBody:
        description: Data for pcakage creation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BudgetOfferPackageDto"
        required: true
      responses:
        "400":
          description: Validation of input data failed
          content:
            application/json:
              schema:
                type: string
        "409":
          description: Entity already exists
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "201":
          description: Package with newly created package data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BudgetOfferPackageDto"
  /v1/user/{id}:
    get:
      tags:
      - User API
      description: Returns desired user by its id.
      operationId: getUserById
      parameters:
      - name: id
        in: path
        description: UUID of desired user
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "400":
          description: Path parameter does not have a form of UUID
          content:
            application/json:
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Desired user does not exist
          content:
            application/json:
              schema:
                type: string
        "200":
          description: User view with desired details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserViewDto"
  /v1/user/by-username/{username}:
    get:
      tags:
      - User API
      description: Returns desired user by its username.
      operationId: getUserByUsername
      parameters:
      - name: username
        in: path
        description: Username of desired user
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Desired user does not exist
          content:
            application/json:
              schema:
                type: string
        "200":
          description: User view with desired details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserViewDto"
  /v1/user/by-email/{email}:
    get:
      tags:
      - User API
      description: Returns desired user by its email.
      operationId: getUserByEmail
      parameters:
      - name: email
        in: path
        description: Email address of desired user
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Path parameter is not a valid email address.
          content:
            application/json:
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Desired user does not exist
          content:
            application/json:
              schema:
                type: string
        "200":
          description: User view with desired details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserViewDto"
  /v1/user/all-users:
    get:
      tags:
      - User API
      description: Returns all users.
      operationId: getAllUsers
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: List of all users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserViewDto"
  /v1/role/{id}:
    get:
      tags:
      - Role API
      description: Returns desired role by its id.
      operationId: getRoleById
      parameters:
      - name: id
        in: path
        description: UUID of desired role
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "400":
          description: Path parameter does not have a form of UUID
          content:
            application/json:
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Desired role does not exist
          content:
            application/json:
              schema:
                type: string
        "200":
          description: Role view with desired details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleViewDto"
    delete:
      tags:
      - Role API
      description: Deletes role by it's ID
      operationId: deleteRole
      parameters:
      - name: id
        in: path
        description: Id of role that should be deleted.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Desired role does not exist
          content:
            application/json:
              schema:
                type: string
        "200":
          description: Role was successfully deleted.
          content:
            application/json:
              schema:
                type: boolean
  /v1/role/all-roles:
    get:
      tags:
      - Role API
      description: Returns all available roles.
      operationId: getAllRoles
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: List of all roles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleViewDto"
  /v1/payment/{id}:
    get:
      tags:
      - Payment API
      description: Returns desired payment by its id.
      operationId: getPaymentById
      parameters:
      - name: id
        in: path
        description: UUID of desired payment
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "400":
          description: Path parameter does not have a form of UUID
          content:
            application/json:
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Desired payment does not exist
          content:
            application/json:
              schema:
                type: string
        "200":
          description: Payment view with desired details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentViewDto"
  /v1/payment/all-payments:
    get:
      tags:
      - Payment API
      description: Returns all payments.
      operationId: getAllPayments
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: List of all payments.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaymentViewDto"
  /v1/budget-package-offer/{id}:
    get:
      tags:
      - Budget package offer API
      description: Returns desired budget package by its id.
      operationId: getBudgetOfferPackageById
      parameters:
      - name: id
        in: path
        description: UUID of desired package
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "400":
          description: Path parameter does not have a form of UUID
          content:
            application/json:
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Desired package does not exist
          content:
            application/json:
              schema:
                type: string
        "200":
          description: Budget package with desired details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BudgetOfferPackageDto"
  /v1/budget-package-offer/available-packages:
    get:
      tags:
      - Budget package offer API
      description: Returns all available budget packages.
      operationId: getAllAvailableBudgetOfferPackages
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: List of all available packages.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BudgetOfferPackageDto"
  /v1/budget-package-offer/all-packages:
    get:
      tags:
      - Budget package offer API
      description: Returns all budget packages.
      operationId: getAllBudgetOfferPackages
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                type: string
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: List of all packages.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BudgetOfferPackageDto"
components:
  schemas:
    PaymentBudgetPackageOfferDto:
      type: object
      properties:
        guid:
          type: string
          format: uuid
        priceDollars:
          type: integer
          format: int32
        budgetIncrease:
          type: integer
          format: int32
        description:
          type: string
        isAvailable:
          type: boolean
    RoleViewDto:
      type: object
      properties:
        guid:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        code:
          type: string
          maxLength: 50
          minLength: 0
      required:
      - code
      - description
      - name
    UserPaymentDto:
      type: object
      properties:
        guid:
          type: string
          format: uuid
        budgetOfferPackage:
          $ref: "#/components/schemas/PaymentBudgetPackageOfferDto"
        createdAt:
          type: string
          format: date-time
        paid:
          type: boolean
    UserViewDto:
      type: object
      properties:
        guid:
          type: string
          format: uuid
        teamId:
          type: string
          format: uuid
        username:
          type: string
        mail:
          type: string
        isActive:
          type: boolean
        deletedAt:
          type: string
          format: date-time
        name:
          type: string
        surname:
          type: string
        birthDate:
          type: string
          format: date
        roles:
          type: array
          items:
            $ref: "#/components/schemas/RoleViewDto"
        payments:
          type: array
          items:
            $ref: "#/components/schemas/UserPaymentDto"
      required:
      - mail
      - name
      - surname
      - username
    ChangePasswordRequestDto:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
          pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&-+/|])[A-Za-z\\d@$!%*?&]{8,}$"
        userId:
          type: string
          format: uuid
    PaymentUpdateCreateDto:
      type: object
      properties:
        guid:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        budgetOfferPackageId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        paid:
          type: boolean
    PaymentUserViewDto:
      type: object
      properties:
        guid:
          type: string
          format: uuid
        teamId:
          type: string
          format: uuid
        username:
          type: string
        mail:
          type: string
        isActive:
          type: boolean
        name:
          type: string
        surname:
          type: string
    PaymentViewDto:
      type: object
      properties:
        guid:
          type: string
          format: uuid
        user:
          $ref: "#/components/schemas/PaymentUserViewDto"
        budgetOfferPackage:
          $ref: "#/components/schemas/PaymentBudgetPackageOfferDto"
        createdAt:
          type: string
          format: date-time
        paid:
          type: boolean
    BudgetOfferPackageDto:
      type: object
      properties:
        guid:
          type: string
          format: uuid
        priceDollars:
          type: integer
          format: int32
          minimum: 0
        budgetIncrease:
          type: integer
          format: int32
          minimum: 1
        description:
          type: string
        isAvailable:
          type: boolean
      required:
      - isAvailable
    UserCreateDto:
      type: object
      properties:
        username:
          type: string
          maxLength: 50
          minLength: 3
        mail:
          type: string
        password:
          type: string
          pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&-+/|])[A-Za-z\\d@$!%*?&]{8,}$"
        name:
          type: string
          maxLength: 50
          minLength: 2
        surname:
          type: string
          maxLength: 50
          minLength: 2
        birthDate:
          type: string
          format: date
      required:
      - mail
      - name
      - password
      - surname
      - username
